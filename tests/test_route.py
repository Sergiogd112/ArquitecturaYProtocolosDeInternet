from route import RouteTable
from pytest import fixture
from pandas import DataFrame
from pandas.testing import assert_frame_equal


@fixture
def route():
    return RouteTable()


def test_add_route(route):
    route.add_route(
        {
            "Type": "C",
            "Destination": "10.0.0.0",
            "Cost": "direct connect",
            "NextHop": "direct connect",
            "Interface": "eth0",
            "Mask": 24,
            "Selected": True,
        }
    )
    print(route.routes)
    print(
        DataFrame(
            {
                "Type": ["C"],
                "Destination": ["10.0.0.0"],
                "Cost": ["direct connect"],
                "NextHop": ["direct connect"],
                "Interface": ["eth0"],
                "Mask": [24],
                "Selected": [True],
            }
        )
    )
    assert_frame_equal(
        route.routes,
        DataFrame(
            {
                "Type": ["C"],
                "Destination": ["10.0.0.0"],
                "Cost": ["direct connect"],
                "NextHop": ["direct connect"],
                "Interface": ["eth0"],
                "Mask": [24],
                "Selected": [True],
            }
        ),
    )


def test_reset_routes(route):
    route.add_route(
        {
            "Type": "C",
            "Destination": "10.0.0.0",
            "Cost": "direct connect",
            "NextHop": "direct connect",
            "Interface": "eth0",
            "Mask": 24,
            "Selected": True,
        }
    )
    route.reset_routes()
    assert_frame_equal(
        route.routes,
        DataFrame(
            columns=[
                "Type",
                "Destination",
                "Cost",
                "NextHop",
                "Interface",
                "Mask",
                "Selected",
            ]
        ).astype(
            {
                "Type": "string",
                "Destination": "string",
                "Cost": "string",
                "NextHop": "string",
                "Interface": "string",
                "Mask": "int",
                "Selected": "bool",
            }
        ),
    )


def test_load_vtysh_routes(route):
    route.loads_vtysh_routes(
        """Codes: K - kernel route, C - connected, S - static, R - RIP,
       O - OSPF, I - IS-IS, B - BGP, P - PIM, A - Babel, N - NHRP,
       > - selected route, * - FIB route

O   10.1.1.0/24 [110/10] is directly connected, eth0, 03:15:24
C>* 10.1.1.0/24 is directly connected, eth0
O   10.1.2.0/24 [110/10] is directly connected, eth1, 03:14:44
C>* 10.1.2.0/24 is directly connected, eth1
O>* 10.1.3.0/24 [110/20] via 10.1.2.2, eth1, 03:14:43
O>* 10.1.4.0/24 [110/30] via 10.1.2.2, eth1, 03:14:33
O>* 10.1.5.0/24 [110/20] via 10.1.2.2, eth1, 03:14:43
O>* 10.1.6.0/24 [110/30] via 10.1.2.2, eth1, 03:14:39
O>* 10.1.7.0/24 [110/40] via 10.1.2.2, eth1, 03:14:38
O   10.1.8.0/24 [110/10] is directly connected, eth2, 03:14:44
C>* 10.1.8.0/24 is directly connected, eth2
O>* 10.1.9.0/24 [110/20] via 10.1.8.4, eth2, 03:14:39
O>* 10.1.10.0/24 [110/20] via 10.1.2.2, eth1, 03:14:43
O>* 10.1.11.0/24 [110/30] via 10.1.2.2, eth1, 03:14:33
  *                       via 10.1.8.4, eth2, 03:14:33
O>* 10.1.12.0/24 [110/30] via 10.1.2.2, eth1, 03:14:39
O>* 10.1.13.0/24 [110/20] via 10.1.8.4, eth2, 03:14:39
O>* 10.1.14.0/24 [110/20] via 10.1.8.4, eth2, 03:14:39
O>* 10.1.15.0/24 [110/30] via 10.1.8.4, eth2, 03:14:34
  *                       via 10.1.2.2, eth1, 03:14:34
O>* 10.1.16.0/24 [110/30] via 10.1.8.4, eth2, 03:14:34
O>* 10.1.17.0/24 [110/40] via 10.1.2.2, eth1, 03:14:38
C>* 127.0.0.0/8 is directly connected, lo
"""
    )
    print(route.format_table())
    with open("tests/route.txt", "w") as f:
        f.write(route.format_table())
    assert (
        route.format_table()
        == """+------+-------------+----------+----------------+-----------+------+----------+
| [1mType[0m | [1mDestination[0m | [1m  Cost  [0m | [1m   NextHop    [0m | [1mInterface[0m | [1mMask[0m | [1mSelected[0m |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |   10.1.1.0  | [110/10] | direct connect |    eth0   |  24  |  False   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [36mC[0m  |   10.1.1.0  |    x     | direct connect |    eth0   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |  10.1.10.0  | [110/20] |    10.1.2.2    |    eth1   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |  10.1.11.0  | [110/30] |    10.1.2.2    |    eth1   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |  10.1.11.0  |    x     |    10.1.8.4    |    eth2   |  24  |  False   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |  10.1.12.0  | [110/30] |    10.1.2.2    |    eth1   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |  10.1.13.0  | [110/20] |    10.1.8.4    |    eth2   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |  10.1.14.0  | [110/20] |    10.1.8.4    |    eth2   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |  10.1.15.0  | [110/30] |    10.1.8.4    |    eth2   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |  10.1.15.0  |    x     |    10.1.2.2    |    eth1   |  24  |  False   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |  10.1.16.0  | [110/30] |    10.1.8.4    |    eth2   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |  10.1.17.0  | [110/40] |    10.1.2.2    |    eth1   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |   10.1.2.0  | [110/10] | direct connect |    eth1   |  24  |  False   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [36mC[0m  |   10.1.2.0  |    x     | direct connect |    eth1   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |   10.1.3.0  | [110/20] |    10.1.2.2    |    eth1   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |   10.1.4.0  | [110/30] |    10.1.2.2    |    eth1   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |   10.1.5.0  | [110/20] |    10.1.2.2    |    eth1   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |   10.1.6.0  | [110/30] |    10.1.2.2    |    eth1   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |   10.1.7.0  | [110/40] |    10.1.2.2    |    eth1   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |   10.1.8.0  | [110/10] | direct connect |    eth2   |  24  |  False   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [36mC[0m  |   10.1.8.0  |    x     | direct connect |    eth2   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [33mO[0m  |   10.1.9.0  | [110/20] |    10.1.8.4    |    eth2   |  24  |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
|   [36mC[0m  |  127.0.0.0  |    x     | direct connect |     lo    |  8   |   True   |
+------+-------------+----------+----------------+-----------+------+----------+
"""
    )
